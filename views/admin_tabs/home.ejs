<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">


<body>


    <table class="table table-striped">
        <thead>
            <tr>
                <th>First name</th>
                <th>Last name</th>
                <th>Username</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><%= firstName %></td>
                <td><%= lastName %></td>
                <td><%= username %></td>
            </tr>
        </tbody>
    </table>
    
    <hr>
    
    <input type="checkbox" disabled checked="deleted" id="checkbox"/>
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
             const toast_message = {
     Toast: Swal.mixin({
   toast: true,
   position: "top-end",
   showConfirmButton: false,
   timer: 3000,
   timerProgressBar: true,
   didOpen: (toast) => {
     toast.onmouseenter = Swal.stopTimer;
     toast.onmouseleave = Swal.resumeTimer;
   }
 }),
 
     error: function (message){
         this.Toast.fire({
           icon: "error",
           title: message
         });
     },

     success: function (message){
         this.Toast.fire({
           icon: "success",
           title: message
         });
     }
 
     
 }
    </script>

    <% if(deleted) { %>
        <label for="checkbox">This account has been deleted</label>

        <div>
            <input class="btn btn-outline-warning" id="restoreAccount" type="submit" value="Restore account"/>

            </div>


            <script>
              const form = document.getElementById("restoreAccount");

              form.addEventListener("click", (event) => {
  Swal.fire({
  title: "Are you sure you want to restore this account?",
  icon: "warning",
  showCancelButton: true,
  confirmButtonColor: "green",
  cancelButtonColor: "#d33",
  confirmButtonText: "Yes, recover it!"
}).then((result) => {
  if (result.isConfirmed) {
    fetch('/admin/restore/<%= username %>', {method: 'PUT'}).then(x => x.json() ).then( (data) => {
      if( data.ok ){
       toast_message.success(data.message);
    window.location.reload();
      } else {
        toast_message.error(data.message);
      }
    })
    /*
    Swal.fire({
      title: "Deleted!",
      text: "Your file has been deleted.",
      icon: "success"
    });
    */
  }
});
})

            </script>

    <% } else { %>
        <label for="checkbox">This account has not been deleted</label>
    
        <div>
    
            <form id="form_1" class="needs-validation" novalidate>
                <div class="input-group mb-3">
        
                  <input type="text" name="fname" id="fname" class="form-control" required autocapitalize="off"
                    autocomplete="off" placeholder="First name" aria-label="First name" aria-describedby="First name" />
                  <div class="invalid-feedback"> Please provide a first name.</div>
                  <input class="btn btn-outline-secondary" type="submit" value="set new first name" />
                </div>
              </form>
        
        
              <form id="form_2" class="needs-validation" novalidate>
                <div class="input-group mb-3">
        
                  <input type="text" name="lname" id="lname" class="form-control" required autocapitalize="off"
                    autocomplete="off" placeholder="Last name" aria-label="Last name" aria-describedby="Last name" />
                  <div class="invalid-feedback"> Please provide a last name. </div>
                  <input class="btn btn-outline-secondary" type="submit" value="set new last name" />
                </div>
        
              </form>
        
        
        
        
        
              <form id="form_3" class="needs-validation" novalidate>
        
        
        
        
                <div class="input-group mb-3">
        
                  <input type="text" name="new_username" id="new_username" class="form-control" required autocapitalize="off"
                    autocomplete="off" placeholder="Username" aria-label="Username" aria-describedby="Username" />
                  <div class="invalid-feedback"> Please provide a Username name. </div>
                  <input class="btn btn-outline-danger" type="submit" value="set new Username" />
                </div>
        
              </form>
        
        
        
              <form id="form_4" class="needs-validation" novalidate>
                <div class="input-group mb-3">
        
                  <input type="text" name="new_password" id="new_password" class="form-control" required autocapitalize="off"
                    autocomplete="off" placeholder="Password" aria-label="Password" aria-describedby="Password" />
                  <div class="invalid-feedback"> Please provide a Password </div>
                  <input class="btn btn-outline-danger" type="submit" value="set new password" />
                </div>
        
              </form>
        
              <input class="btn btn-outline-warning" id="restoreAccount" type="submit" value="Delete account"/>
            
    
              
        </div>
    
        <hr>
    
        
    <script>
// /admin/change/
let fm1 = document.querySelector('#form_1'),
    fm2 = document.querySelector('#form_2'),
    fm3 = document.querySelector('#form_3'),
    fm4 = document.querySelector('#form_4'),
    rm5 = document.querySelector('#restoreAccount');


const forms = [{ form: fm1, req: "fname" }, { form: fm2, req: "lname" }, { form: fm3, req: "username" }, { form: fm4, req: "password" } ];


rm5.addEventListener("click", (event) => {
  Swal.fire({
  title: "Are you sure you want to delete this account?",
  text: "You can always have your account recoverd",
  icon: "warning",
  showCancelButton: true,
  confirmButtonColor: "#3085d6",
  cancelButtonColor: "#d33",
  confirmButtonText: "Yes, delete it!"
}).then((result) => {
  if (result.isConfirmed) {
    fetch('/admin/deleteAccount/<%= username %>', {method: 'DELETE'}).then(x => x.json() ).then( (data) => {
      if( data.ok ){
       toast_message.success(data.message);
    window.location.reload();
      } else {
        toast_message.error(data.message);
      }
    })
    /*
    Swal.fire({
      title: "Deleted!",
      text: "Your file has been deleted.",
      icon: "success"
    });
    */
  }
});
})


forms.forEach((box) => {
    let req = box.req;
    let form = box.form;

   
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      e.stopPropagation();

        var o = {};
        new FormData(form).forEach((value, key) => (o[key] = value));
    
            fetch(`/admin/change/${req}/<%= username %>`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(o),
            })
                .then((raw) => raw.json())
                .then((data) => {
                    if (!data.ok) {
                        toast_message.error(data.message);
                    } else {
                        toast_message.success(data.message);
                    }
                })
                .catch((err) => console.log(err));
    });

});
// Enable form validation
(function () {
    'use strict';

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    var forms = document.querySelectorAll('.needs-validation');

    // Loop over them and prevent submission
    Array.prototype.slice.call(forms).forEach(function (form) {
        form.addEventListener('submit', function (event) {
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }

            form.classList.add('was-validated');
        }, false);
    });
})();


    </script>
    
    <% } %>

</body>



<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
  integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous"></script>